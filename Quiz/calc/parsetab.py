
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/NAME NUMBER PRINTstatement : NAME "=" expressionstatement : PRINT expressionstatement : statement statementexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : NUMBERexpression : NAME'
    
_lr_action_items = {'NAME':([0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,],[2,4,2,-9,-8,-2,4,2,4,4,4,4,-1,-4,-6,-5,-7,]),'+':([4,5,6,13,14,15,16,17,],[-9,-8,9,9,-4,-6,-5,-7,]),'*':([4,5,6,13,14,15,16,17,],[-9,-8,10,10,10,-6,10,-7,]),'-':([4,5,6,13,14,15,16,17,],[-9,-8,11,11,-4,-6,-5,-7,]),'NUMBER':([1,7,9,10,11,12,],[5,5,5,5,5,5,]),'/':([4,5,6,13,14,15,16,17,],[-9,-8,12,12,12,-6,12,-7,]),'PRINT':([0,3,4,5,6,8,13,14,15,16,17,],[1,1,-9,-8,-2,1,-1,-4,-6,-5,-7,]),'=':([2,],[7,]),'$end':([3,4,5,6,8,13,14,15,16,17,],[0,-9,-8,-2,-3,-1,-4,-6,-5,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([1,7,9,10,11,12,],[6,13,14,15,16,17,]),'statement':([0,3,8,],[3,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','calc.py',46),
  ('statement -> PRINT expression','statement',2,'p_statement_print','calc.py',50),
  ('statement -> statement statement','statement',2,'p_statement_again','calc.py',54),
  ('expression -> expression + expression','expression',3,'p_expression_binop','calc.py',57),
  ('expression -> expression - expression','expression',3,'p_expression_binop','calc.py',58),
  ('expression -> expression * expression','expression',3,'p_expression_binop','calc.py',59),
  ('expression -> expression / expression','expression',3,'p_expression_binop','calc.py',60),
  ('expression -> NUMBER','expression',1,'p_expression_number','calc.py',71),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',76),
]
